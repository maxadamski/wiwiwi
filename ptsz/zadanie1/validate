#!/usr/bin/env python3

import numpy as np
import random
from sys import argv
from sys import stderr
from time import time

# utilities
map = lambda xs, f: [f(x) for x in xs]

def panic(*args):
    print(*args, file=stderr)
    exit(1)

def loss(P, R, D, W, J):
    t = 0
    L = 0
    for j in J:
        if t < R[j]:
            t = R[j]
        t += P[j]
        if t > D[j]:
            L += W[j]
    return L

def check(input, output):
    P, R, D, W = input
    L, J = output
    if np.min(J) == 0: J += 1
    if len(J) > len(set(J)): panic('duplicate jobs!')
    L_real = loss(P, R, D, W, J)
    print(L_real if L != L_real else 'ok')

def read_input(path):
    with open(path, 'r') as f:
        lines = f.readlines()
        jobs = [map(x.split(), int) for x in lines[1:]]
        return np.array(jobs).T

def read_output(path):
    with open(path, 'r') as f:
        lines = f.readlines()
        loss = int(lines[0])
        jobs = map(lines[1].split(), int)
        return loss, np.array(jobs) - 1

if __name__ == '__main__':
    if len(argv) <= 1: panic(f'usage: {argv[0]} INPUT OUTPUT')
    check(read_input(argv[1]), read_output(argv[2]))
